import asyncio
from datetime import datetime

from aiogram import Dispatcher
from aiogram.types import Message

from source.main import collect_all_data
from tgbot.config import db, ADMIN_IDS
from tgbot.filters.admin import UserFilter
from tgbot.misc.commands import Commands
from tgbot.misc.keyboards.reply import mainMenu, aviaMenu, trainMenu


async def user_start(message: Message):
    if (not db.user_exists(message.from_user.id)):
        db.add_user(message.from_user.id, message.from_user.username, message.from_user.full_name, datetime.now())
        for admin in ADMIN_IDS:
            await message.bot.send_message(admin, f"üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:"
                                                  f"\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}, <b>{message.from_user.first_name}</b>\n"
                                                  f"[ID:{message.from_user.id}] —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –≤ –±–æ—Ç–µ.")
        await message.bot.send_message(message.from_user.id,
                                       f"–ü—Ä–∏–≤–µ—Ç—Å–≤—É–µ–º —Ç–µ–±—è {message.from_user.first_name}, –Ω–∞ –ø—Ä–æ–µ–∫—Ç–µ –ê–≠–†–û –ñ–î –ò–ñ–ï–í–°–ö.\n"
                                       f"–ë–æ—Ç —É–º–µ–µ–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ  –ê—ç—Ä–æ–ø–æ—Ä—Ç –∏ –†–ñ–î –ò–∂–µ–≤—Å–∫",
                                       reply_markup=mainMenu)
    else:
        await message.bot.send_message(message.from_user.id,
                                       f"–ü—Ä–∏–≤–µ—Ç—Å–≤—É–µ–º —Ç–µ–±—è {message.from_user.first_name}, –Ω–∞ –ø—Ä–æ–µ–∫—Ç–µ –ê–≠–†–û –ñ–î –ò–ñ–ï–í–°–ö.\n"
                                       f"–ë–æ—Ç —É–º–µ–µ–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ  –ê—ç—Ä–æ–ø–æ—Ä—Ç –∏ –†–ñ–î –ò–∂–µ–≤—Å–∫",
                                       reply_markup=mainMenu)


async def avia_schedule(message: Message):
    await message.bot.send_message(message.from_user.id, f'–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–∞ ‚úÖ', reply_markup=aviaMenu)


async def train_schedule(message: Message):
    await message.bot.send_message(message.from_user.id, f'–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–∞ ‚úÖ\n', reply_markup=trainMenu)


async def scheduled(wait_for):
    while True:
        await asyncio.sleep(wait_for)
        collect_all_data()


def register_user(dp: Dispatcher):
    dp.register_message_handler(
        user_start, UserFilter(),
        text=['/start', '!start', 'start', Commands.come_back.value],
        state="*"
    )
    dp.register_message_handler(
        avia_schedule, UserFilter(),
        text=Commands.avia_schedule.value,
        state='*'
    )
    dp.register_message_handler(
        train_schedule, UserFilter(),
        text=Commands.train_schedule.value,
        state='*'
    )
