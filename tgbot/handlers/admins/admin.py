from datetime import datetime

from aiogram import Dispatcher
from aiogram.types import Message

from source.main import collect_all_data
from tgbot.config import db, ADMIN_IDS
from tgbot.filters import AdminFilter
from tgbot.misc.commands import Commands
from tgbot.misc.keyboards.inline import mailing_inline
from tgbot.misc.keyboards.reply import adminMainMenu, adminMenu


async def admin_start(message: Message):
    if (not db.user_exists(message.from_user.id)):
        db.add_user(message.from_user.id, message.from_user.username, message.from_user.full_name, datetime.now())
        for admin in ADMIN_IDS:
            await message.bot.send_message(admin, f"üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:"
                                                  f"\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}, <b>{message.from_user.first_name}</b>\n"
                                                  f"[ID:{message.from_user.id}] —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –≤ –±–æ—Ç–µ.")
        await message.bot.send_message(message.from_user.id,
                                       f"–ü—Ä–∏–≤–µ—Ç—Å–≤—É–µ–º —Ç–µ–±—è {message.from_user.first_name}, –Ω–∞ –ø—Ä–æ–µ–∫—Ç–µ –ê–≠–†–û –ñ–î –ò–ñ–ï–í–°–ö.\n"
                                       f"–ë–æ—Ç —É–º–µ–µ–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ  –ê—ç—Ä–æ–ø–æ—Ä—Ç –∏ –†–ñ–î –ò–∂–µ–≤—Å–∫",
                                       reply_markup=adminMainMenu)
    else:
        await message.bot.send_message(message.from_user.id,
                                       f"–ü—Ä–∏–≤–µ—Ç—Å–≤—É–µ–º —Ç–µ–±—è {message.from_user.first_name}, –Ω–∞ –ø—Ä–æ–µ–∫—Ç–µ –ê–≠–†–û –ñ–î –ò–ñ–ï–í–°–ö.\n"
                                       f"–ë–æ—Ç —É–º–µ–µ–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ  –ê—ç—Ä–æ–ø–æ—Ä—Ç –∏ –†–ñ–î –ò–∂–µ–≤—Å–∫",
                                       reply_markup=adminMainMenu)


async def admin_menu(message: Message):
    await message.bot.send_message(message.from_user.id,
                                   '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å!\n\n–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É - /start.',
                                   reply_markup=adminMenu)


async def mailing_menu(message: Message):
    await message.bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: ',
                                   reply_markup=mailing_inline)


async def update_parser(message: Message):
    await message.bot.send_message(message.from_user.id, '‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–∂–∏–¥–∞–π—Ç–µ...')
    collect_all_data()
    await message.bot.send_message(message.from_user.id, '‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª–æ—Å—å!')


def register_admin(dp: Dispatcher):
    dp.register_message_handler(
        admin_start, AdminFilter(),
        text=['/start', '!start', 'start', Commands.come_back.value],
        state="*"
    )
    dp.register_message_handler(
        admin_menu, AdminFilter(),
        text=Commands.admin_menu.value,
        state='*'
    )
    dp.register_message_handler(
        update_parser, AdminFilter(),
        text=Commands.update_parser.value,
        state='*'
    )
    dp.register_message_handler(
        mailing_menu, AdminFilter(),
        text=Commands.mailing.value,
        state='*'
    )